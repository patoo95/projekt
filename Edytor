package projekt;


import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.TreeSet;

public class Edytor extends JFrame {

	boolean isChange = false;
	JTextArea textArea;
	String titlePrefix = "Edytor tekstu - ", titleSufix,
			titleSufixDefault = "bez tytułu";
	FileManager fileManager;
	EditManager editManager;
	Hashtable<String, Color> colors;
	HashMap<Integer, String> fonts;

	{
		colors = new Hashtable<String, Color>();

		colors.put("Niebieski", Color.BLUE);
		colors.put("Żółty", Color.YELLOW);
		colors.put("Pomarańczowy", Color.ORANGE);
		colors.put("Czerwony", Color.RED);
		colors.put("Biały", Color.WHITE);
		colors.put("Czarny", Color.BLACK);
		colors.put("Zielony", Color.GREEN);

		fonts = new HashMap<Integer, String>();

		fonts.put(8, "8 pts");
		fonts.put(10, "10 pts");
		fonts.put(12, "12 pts");
		fonts.put(14, "14 pts");
		fonts.put(16, "16 pts");
		fonts.put(18, "18 pts");
		fonts.put(20, "20 pts");
		fonts.put(22, "22 pts");
		fonts.put(24, "24 pts");
		fonts.put(28, "28 pts");
		fonts.put(32, "32 pts");
	}

	Edytor() {
		initElements();
		initUI();
	}

	protected void initElements() {

		textArea = new JTextArea();
		textArea.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void changedUpdate(DocumentEvent e) {
			}

			@Override
			public void insertUpdate(DocumentEvent e) {
				isChange = true;
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
			}
		});
		add(new JScrollPane(textArea));

		fileManager = new FileManager(textArea);
		editManager = new EditManager(textArea);

		// menu: plik
		
		JMenu file = new JMenu("Plik");

		JMenuItem fileOpen = new JMenuItem("Otwórz");
		fileOpen.setToolTipText("Otwórz plik");
		fileOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,
				ActionEvent.CTRL_MASK));
		fileOpen.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				fileManager.read();
				setTitleText(fileManager.getName());
			}
		});

		JMenuItem fileSave = new JMenuItem("Zapisz");
		fileSave.setToolTipText("Zapisz do pliku");
		fileSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,
				ActionEvent.CTRL_MASK));
		fileSave.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				fileManager.save();
			}
		});

		JMenuItem fileSaveas = new JMenuItem("Zapisz jako");
		fileSaveas.setToolTipText("Zapisz do nowego pliku");
		fileSaveas.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,
				ActionEvent.CTRL_MASK));
		fileSaveas.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				fileManager.saveAs();
				setTitleText(fileManager.getName());
			}
		});

		JMenuItem fileExit = new JMenuItem("Wyjście");
		fileExit.setToolTipText("Wyjście z edytora");
		fileExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,
				ActionEvent.CTRL_MASK));
		fileExit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (isChange == false)
					System.exit(0);

				int choice = JOptionPane.showConfirmDialog(null,
						"Zakończyć pracę? Niezapisane zmiany zostaną utracone",
						"Wyjście z programu", 2);
				if (choice == JOptionPane.OK_OPTION) {
					System.exit(0);
				} else {
					return;
				}
			}
		});

		file.add(fileOpen);
		file.add(fileSave);
		file.add(fileSaveas);
		file.addSeparator();
		file.add(fileExit);

		
		// menu: edycja
		JMenu edit = new JMenu("Edytuj");
		JMenuItem selectAll = new JMenuItem("Zaznacz wszystko");
		selectAll.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,
				ActionEvent.CTRL_MASK));
		selectAll.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				editManager.selectAll();
			}
		});
		
		JMenuItem cut = new JMenuItem("Wytnij");
		cut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,
				ActionEvent.CTRL_MASK));
		cut.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				editManager.cut();
			}
		});
		 
		JMenuItem copy = new JMenuItem("Kopiuj");
		copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,
				ActionEvent.CTRL_MASK));
		copy.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				editManager.copy();
			}
		});
		
		JMenuItem paste = new JMenuItem("Wklej");
		paste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,
				ActionEvent.CTRL_MASK));
		paste.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				editManager.paste();
			}
		});
		
		edit.add(selectAll);
		edit.add(cut);
		edit.add(copy);
		edit.add(paste);
		 
		

		// menu: opcje
		JMenu options = new JMenu("Opcje");
		JMenuItem menuItem;

		JMenu optionsForeground = new JMenu("Kolor tekstu");
		Foreground listenerForeground = new Foreground(textArea);
		for (String key : colors.keySet()) {
			menuItem = new JMenuItem(key, new Icon(colors.get(key)));
			menuItem.addActionListener(listenerForeground);
			optionsForeground.add(menuItem);
		}

		JMenu optionsBackground = new JMenu("Kolor tła");
		Background listenerBackground = new Background(textArea);
		for (String key : colors.keySet()) {
			menuItem = new JMenuItem(key, new Icon(colors.get(key)));
			menuItem.addActionListener(listenerBackground);
			optionsBackground.add(menuItem);
		}

		JMenu optionsFontsize = new JMenu("Rozmiar czcionki");
		TreeSet<Integer> sortedSet = new TreeSet<Integer>(
				new ArrayList<Integer>(fonts.keySet()));
		for (Object key : sortedSet.toArray()) {
			menuItem = new JMenuItem(fonts.get(key));
			menuItem.addActionListener(new FontSize(textArea,
					(Integer) key));
			optionsFontsize.add(menuItem);
		}

		options.add(optionsForeground);
		options.add(optionsBackground);
		options.add(optionsFontsize);

		JMenuBar menu = new JMenuBar();
		menu.add(file);
		menu.add(edit);
		menu.add(options);

		setJMenuBar(menu);
	}

	protected void initUI() {

		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setSize(new Dimension(800, 500));
		setLocationRelativeTo(null);
		setTitle(titlePrefix + titleSufixDefault);

		setVisible(true);
	}

	protected void setTitleText(String sufix) {
		titleSufix = sufix;
		setTitle(titlePrefix + titleSufix);
	}

	public static void main(String[] args) {

		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new Edytor();
			}
		});
	}
}
